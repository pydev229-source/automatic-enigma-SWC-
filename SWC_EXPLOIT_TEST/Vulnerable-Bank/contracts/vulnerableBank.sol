// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.20;
contract VulnerableBank {
    mapping(address => uint256) public balances;
    event Deposit(address indexed who, uint256 amount);
    event Withdrawal(address indexed who, uint256 amount);
    function deposit() external payable {
        require(msg.value > 0, "zero deposit");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    // VULNERABLE: external call happens BEFORE state update
    function withdrawAll() external {
        uint256 bal = balances[msg.sender];
        require(bal > 0, "No balance"); // 'reentry' just reading the previous amount of Balances, and didn't reset the Balances

        // NOTE: low-level call, forwarding all gas. Vulnerable because state is updated AFTER.
        (bool ok, ) = payable(msg.sender).call{value: bal}("");
        require(ok, "Transfer failed"); // Always ok till the Balances == 0 or not enough cost of gas for doing transaction and the gases are insufficient and vice versa

        // State update AFTER external call -> vulnerable to reentrancy
        balances[msg.sender] = 0;
        emit Withdrawal(msg.sender, bal); // all in of pulling funds
    }
    // convenience to accept plain transfers
    receive() external payable {
        this.deposit();
    }
}
